/* tslint:disable */
/* eslint-disable */
/**
 * CasaOS Firewall API
 * <picture>     <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_dark_night_800px.png\">     <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png\">     <img alt=\"CasaOS\" src=\"https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_twilight_blue_800px.png\"> </picture>
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof BaseResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetRules200Response
 */
export interface GetRules200Response {
    /**
     * message returned by server side if there is any
     * @type {string}
     * @memberof GetRules200Response
     */
    'message'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRules200Response
     */
    'data'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetRules200ResponseAllOf
 */
export interface GetRules200ResponseAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRules200ResponseAllOf
     */
    'data'?: Array<string>;
}

/**
 * NftableMethodsApi - axios parameter creator
 * @export
 */
export const NftableMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * (TODO)
         * @summary Get Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRules: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nftables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access_token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NftableMethodsApi - functional programming interface
 * @export
 */
export const NftableMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NftableMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * (TODO)
         * @summary Get Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRules200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRules(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NftableMethodsApi - factory interface
 * @export
 */
export const NftableMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NftableMethodsApiFp(configuration)
    return {
        /**
         * (TODO)
         * @summary Get Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRules(options?: any): AxiosPromise<GetRules200Response> {
            return localVarFp.getRules(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NftableMethodsApi - object-oriented interface
 * @export
 * @class NftableMethodsApi
 * @extends {BaseAPI}
 */
export class NftableMethodsApi extends BaseAPI {
    /**
     * (TODO)
     * @summary Get Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftableMethodsApi
     */
    public getRules(options?: AxiosRequestConfig) {
        return NftableMethodsApiFp(this.configuration).getRules(options).then((request) => request(this.axios, this.basePath));
    }
}


