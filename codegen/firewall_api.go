// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// Port defines model for Port.
type Port struct {
	Action   *string `json:"action,omitempty"`
	Port     *string `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
}

// Rule defines model for Rule.
type Rule = string

// ChangePortResponseOK defines model for ChangePortResponseOK.
type ChangePortResponseOK struct {
	Data *string `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// GetPortsResponseOK defines model for GetPortsResponseOK.
type GetPortsResponseOK struct {
	Data *[]Port `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// GetRulesResponseOK defines model for GetRulesResponseOK.
type GetRulesResponseOK struct {
	Data *[]Rule `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// GetVersionResponseOK defines model for GetVersionResponseOK.
type GetVersionResponseOK struct {
	Data *string `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// ResponseBadRequest defines model for ResponseBadRequest.
type ResponseBadRequest = BaseResponse

// ResponseServiceUnavailable defines model for ResponseServiceUnavailable.
type ResponseServiceUnavailable = BaseResponse

// OpenOrClosePortJSONRequestBody defines body for OpenOrClosePort for application/json ContentType.
type OpenOrClosePortJSONRequestBody = Port

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Rules
	// (GET /firewall)
	GetRules(ctx echo.Context) error
	// Get Opened Ports
	// (GET /port)
	GetOpenedPorts(ctx echo.Context) error
	// Open or Close a Port
	// (POST /port)
	OpenOrClosePort(ctx echo.Context) error
	// Get Version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRules converts echo context to params.
func (w *ServerInterfaceWrapper) GetRules(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRules(ctx)
	return err
}

// GetOpenedPorts converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenedPorts(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenedPorts(ctx)
	return err
}

// OpenOrClosePort converts echo context to params.
func (w *ServerInterfaceWrapper) OpenOrClosePort(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OpenOrClosePort(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/firewall", wrapper.GetRules)
	router.GET(baseURL+"/port", wrapper.GetOpenedPorts)
	router.POST(baseURL+"/port", wrapper.OpenOrClosePort)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXQW8bxRf/KqP3/x9aaeNdJSCVlXpogqiiIFwlBQ5xZI1nn3en3Z0ZZmadGGslEEgU",
	"iSMHqLhw44jghDj0y7Rp+RZoZndtxzZOHJqqnJKdefPe7/3mN+89T4DJQkmBwhqIJ6DRKCkM+o+9jIoU",
	"H0htD5vl7oFbZ1JYFNb9S5XKOaOWSxE+MlK4NcMyLKjfzfPuEOLjCfxf4xBi+F84CxfWdibcpQbbAFAF",
	"E1BaKtSW1ygSar0zPKOFyhFiMCVjaAwEYMfKL1jNRQpVNV2Rg0fILFQnAWikSVfkY4itLrFyRgkaprly",
	"qCGG7gFUAdxH6zI1b0Oq3GLhF9b5cmhhljHVmo5XUrAu5cMyx/9Oyg7tlVLe5NY/QW24FG+XxKPOe53o",
	"9Qq8jb9Lk0P8rERjr5DoFNEECjSGpi72Lk1I66IK/iUZV0lgIWB7+Aj1iDP8WNAR5Tkd1Divk1Hjicy7",
	"eiOZrQw8jezFccFpvCidaQ6TBc/NBtFoSy0wIYMxMahHqInhCRI+JDZDjYQbQsUYgjn1wSLyZSFWAfgC",
	"tASIshrAvJqlQrEs5gBU42FmeSdaaaellUzmF20tU1d5IQH4shFPVpgaZKXmdnzk6G7xu97St/Ix+iy4",
	"IzNDmqCGAAQtnIt7pc2k5p97ac1AUMUPcFyzw8VQLt9Kr4yiHaY4s6VG/4E9QQgh9YaRpWZICkw4vduD",
	"W0rjELXZYjKXesuLAmOSUP34dg+I0cygvduDzFpl4jDU9LSTcpuVg9Kgbh5Ch8ki3Gf4aUZzfIgsC3OZ",
	"yrCgXISMGipN86c/oEKg7jv3fcHTzPbvRJE66yiR9uC6YHPn6AbR2lPuQ/QHeYnrAfMiJTR3EPaood2j",
	"GtSbR1SjCS+owImIW6/rGhz5gGs8pXlO7j3YhwBGdZuCGEbbTtTuTVHFIYadTtTZgQAUtZmXcDhsjrqP",
	"FO2yDF89+/Gvb7579eyH899+Pv/p2/Ovfn/x5NcXXz59/ucXz/948vL7X14+/Rp8DO0lvp9APB0XfHWY",
	"GxO3o+ifGvfULlwxa1QBvBvtXH50Tbn3b7gsCqrHNUDSIrQ0NRAfw5TFAm0mEwMn7kzYVp6V7Nx62H2/",
	"e3tV/l2FAhM/J16XhcUh80ZYqHGSFugaMlwRNlfnwDnu6r1cGv+7wJPg+/KuTMYbDU6Xj7a+jG7O8cpf",
	"LVUA72zC8tyQ9NovyHFIpCaeRUJJQ+Qlip2+/41F2wy41xXs8nx8I5KdoWyJ+Ghone08D3Mt2w9jF5v1",
	"8Ymbueohx/j9UucQQzjanpVEZ9JEWKTwQ3m6leMI25LbNPulC3EuzrYsTe9rWara04Lt+vs8qf4OAAD/",
	"/7qS0bJ4DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
