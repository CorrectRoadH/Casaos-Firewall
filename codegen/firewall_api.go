// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Access_tokenScopes = "access_token.Scopes"
)

// Defines values for PortProtocol.
const (
	Tcp PortProtocol = "tcp"
	Udp PortProtocol = "udp"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// Port defines model for Port.
type Port struct {
	Port     string       `json:"port"`
	Protocol PortProtocol `json:"protocol"`
	Status   *string      `json:"status,omitempty"`
}

// PortProtocol defines model for Port.Protocol.
type PortProtocol string

// ChangePortResponseOK defines model for ChangePortResponseOK.
type ChangePortResponseOK struct {
	Data *string `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// GetPortsResponseOK defines model for GetPortsResponseOK.
type GetPortsResponseOK struct {
	Data *[]Port `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// GetStateResponseOK defines model for GetStateResponseOK.
type GetStateResponseOK struct {
	Data *bool `json:"data,omitempty"`

	// Message message returned by server side if there is any
	Message *string `json:"message,omitempty"`
}

// ResponseBadRequest defines model for ResponseBadRequest.
type ResponseBadRequest = BaseResponse

// ResponseServiceUnavailable defines model for ResponseServiceUnavailable.
type ResponseServiceUnavailable = BaseResponse

// OpenPortJSONRequestBody defines body for OpenPort for application/json ContentType.
type OpenPortJSONRequestBody = Port

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get State
	// (GET /firewall)
	GetState(ctx echo.Context) error
	// Close a Port
	// (DELETE /port)
	DeletePortRule(ctx echo.Context) error
	// Get Opened Ports
	// (GET /port)
	GetOpenedPorts(ctx echo.Context) error
	// Open  a Port
	// (POST /port)
	OpenPort(ctx echo.Context) error
	// Update a Port Rule
	// (PUT /port)
	UpdatePortRule(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetState converts echo context to params.
func (w *ServerInterfaceWrapper) GetState(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetState(ctx)
	return err
}

// DeletePortRule converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePortRule(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePortRule(ctx)
	return err
}

// GetOpenedPorts converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenedPorts(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpenedPorts(ctx)
	return err
}

// OpenPort converts echo context to params.
func (w *ServerInterfaceWrapper) OpenPort(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OpenPort(ctx)
	return err
}

// UpdatePortRule converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePortRule(ctx echo.Context) error {
	var err error

	ctx.Set(Access_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePortRule(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/firewall", wrapper.GetState)
	router.DELETE(baseURL+"/port", wrapper.DeletePortRule)
	router.GET(baseURL+"/port", wrapper.GetOpenedPorts)
	router.POST(baseURL+"/port", wrapper.OpenPort)
	router.PUT(baseURL+"/port", wrapper.UpdatePortRule)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXX28TORD/KtbcPYC07Ub0TkIr8UBBV6GelIqC7qGJool3smvw2sZ/0uai/e4nezdp",
	"moSQlgPx1O54/Jvf/PVkCVw3RitS3kGxBEvOaOUofbypUVV0pa1/34uHl1HOtfKkfPwXjZGCoxda5Z+c",
	"VlHmeE0NplMphzMobpbwu6UZFPBbfm8u7/Rcfo6OVgagzZZgrDZkvehYlOgTGN1hYyRBAS5wTs5BBn5h",
	"ksBboSpo27VETz8R99COM7CE5VDJBRTeBmqjUkmOW2EiayhgeAltBhfko6fuV3BVeGqS4BBWZAv3HqO1",
	"uNgbgkMuX3v09EtlNyZp7cNUa0movi+zK+vnWL6nL4GcP8LNNZ8lNOQcVtH2OZZsBdFm3xmKYxzYMri6",
	"fE12Ljh9VDhHIXHa8XyKRz0S24T6KZ7tNby2nErjAWixXThrH5ZbyP0Bs+SDVVSy6YI5snOyzImSmJgx",
	"X5MlJhxDtYBsY7LANvPdEdNmkDpvh5DppfdoLwe7IyqLt7zmWiZdFRoobsBzAxmE0sB4zw3n0Qf3EFsb",
	"UnsHoKUvQVgqI2yitGFxvNNFEZ14sMIvrmPkO1cwzdeJ158plY6Ica0JS7KQgcImQrwOvtZW/Juq7J4K",
	"GnFJiy5QQs30boJGYTA440ZwHyylDxopxhjrDpwOlhNrqBT4agTPjKUZWXfCtdT2JNUHFaxE+/n5CJiz",
	"3JF/NYLae+OKPLd4e1oJX4dpcGT7njjlusnfcfqnRkkfiNe51JXOGxQq5+hQu/7PZIpKkZ1E+IkSVe0n",
	"LwcDc3dqVDWCp5KVEegHsvW3IpmYTGWgw4RFUzGUkcIbdDi87kj9fEYdm/xBFcQiEj6Vd0eO/SUs3aKU",
	"7PXVO8hgTtZ1NTR/ERsjNgEaAQWcnQ5Oz2Kpo69TCeez/mr8qMjvluEFebZSYrHFov3Y0Kmg35WdynV/",
	"8GAxejEYfO11Xuvle17XNoM/B2ffvnpgzqeODU2DdtH7sGLosXKx6dcxa8jXunQwjnfy1XgqSZLfMzaf",
	"fRi+HT7fCcHbpJ52wCC3AqGClJts3kjtiCG76sbOAULZ/pR8hcMF+aEhRWVa0J6ajO3t7ocko+PJVkQP",
	"hsBod3wMInAfV9stBOe6XDxqX/v2Mtl2D8hjg7v3d0KbwR+PCe/Gdva/ZyYGjx1ZmCYcn5SPpsRjm6PT",
	"7UmwXv9Qz248zWn/evgo34zjmtXtNS6dByuhgHz+4n70RZXexLZHf+vbE0lzWo3W/lHfIRIh7k48VhdW",
	"B9Mhbeke9mPc/hcAAP//naGkhWQOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
